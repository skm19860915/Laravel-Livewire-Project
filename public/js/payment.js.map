{"version":3,"sources":["webpack:///./resources/js/helper.js","webpack:///./resources/js/payment.js"],"names":["helper","getSiteUrl","window","location","origin","loadStates","statesJsonFile","this","$","getJSON","data","items","each","key","row","selected","state_code","push","state_name","html","join","append","isSafariBrowser","chromeAgent","navigator","userAgent","indexOf","safariAgent","bootbox","done","on","e","a","form","target","balance","parseFloat","getAttribute","amount","value","preventDefault","alert","payment_increments","split","confirm","message","buttons","cancel","label","className","callback","result","find","prop","text","trigger","refund","confirmModal","refundForm","click","payment_id","dataset","payment","modal","attr","history","scrollIntoView","behavior","block","inline","paymentJS"],"mappings":"oIAAA,qBAEIA,EAAS,CAEXC,WAAY,WACV,OAAOC,OAAOC,SAASC,QAGzBC,WAAY,WACV,IAAIC,EAAiB,GAAH,OAAMC,KAAKN,aAAX,wBAClBO,EAAEC,QAAQH,GAAgB,SAAUI,GAClC,IAAIC,EAAQ,GACZH,EAAEI,KAAKF,GAAM,SAAUG,EAAKC,GAC1B,IAAIC,EAAW,GACXP,EAAE,UAAUE,KAAK,UAAYI,EAAIE,aACnCD,EAAW,YAEbJ,EAAMM,KAAN,yBAA6BH,EAAIE,WAAjC,aAAgDD,EAAhD,YAA4DD,EAAII,WAAhE,iBAGF,IAAIC,EAAOR,EAAMS,KAAK,IACtBZ,EAAE,UAAUa,OAAOF,OAIvBG,gBAAiB,WACf,IAAIA,GAAkB,EAClBC,EAAcC,UAAUC,UAAUC,QAAQ,WAAa,EACvDC,EAAcH,UAAUC,UAAUC,QAAQ,WAAa,EAK3D,OAJKH,GAAeI,IAClBL,GAAkB,GAGbA,IAKItB,a,4YCrCf,IAAM4B,EAAY1B,OAAO0B,SAGjB,WACJ1B,OAAO2B,KAAO,EACVrB,GAAE,WAEEA,EAAE,UAAUsB,GAAG,SAAf,6BAAyB,WAAOC,GAAP,uBAAAC,EAAA,yDACH,GAAf9B,OAAO2B,KADW,oDAEjBI,EAAOzB,EAAEuB,EAAEG,QACXC,EAAUC,WAAWL,EAAEG,OAAOG,aAAa,eACzCC,EAAQF,WAAWL,EAAEG,OAAOI,OAAOC,QAAU,IACtC,GALQ,uBAOjBR,EAAES,iBACFZ,EAAQa,MAAR,oCARiB,mBASV,GATU,UAaY,iBAD7BC,EAAqBT,EAAKvB,KAAK,gBAG/BgC,EAAqBA,EAAmBC,MAAM,KAAKvB,KAAK,OAEzDkB,EAASH,GAjBS,wBAmBjBJ,EAAES,iBACFZ,EAAQa,MAAR,kDApBiB,mBAqBV,GArBU,QAwBjBH,EAASI,IACTX,EAAES,iBACEP,EAAOzB,EAAEuB,EAAEG,QACfN,EAAQgB,QAAQ,CACZC,QAAS,kHACTC,QAAS,CACPC,OAAQ,CACJC,MAAO,MACPC,UAAW,eAEfL,QAAS,CACLI,MAAO,SACPC,UAAW,kBAGjBC,SAAU,WAAF,kBAAE,WAAgBC,GAAhB,SAAAnB,EAAA,sDACFmB,IAEAjD,OAAO2B,KAAO,EACEI,EAAKmB,KAAK,mBAChBC,KAAK,YAAY,GAAMC,KAAK,wBAC/B1B,EAAQgB,QACfX,EAAKsB,QAAQ,WAPX,2CAAF,mDAAE,MAvCG,4CAAzB,uDAqDA,IAAMC,EAAShD,EAAE,mBACXiD,EAAejD,EAAE,iBACjBkD,EAAalD,EAAE,eACrBgD,EAAOG,OAAM,SAAA5B,GACTA,EAAES,iBACF,IAAMoB,EAAa7B,EAAEG,OAAO2B,QAAQC,QACpCL,EAAaM,QACGL,EAAWN,KAAX,yBAAhB,IAEII,EADSxD,UAAOC,aACE,mBAAqB2D,EAC3CF,EAAWM,KAAX,SAA0BR,MAI9B,IAAMS,EAAUzD,EAAE,kBACdyD,EAAQvD,KAAK,YAEFuD,EAAQ,GAChBC,eAAe,CAACC,SAAU,SAAUC,MAAO,MAAOC,OAAQ,gBAW7EC,K","file":"/js/payment.js","sourcesContent":["import axios from \"axios\";\n\nvar helper = {\n\n  getSiteUrl: function () {\n    return window.location.origin;\n  },\n\n  loadStates: function () {\n    let statesJsonFile = `${this.getSiteUrl()}/storage/states.json`;\n    $.getJSON(statesJsonFile, function (data) {\n      let items = [];\n      $.each(data, function (key, row) {\n        let selected = '';\n        if ($('#state').data('value') == row.state_code) {\n          selected = 'selected';\n        }\n        items.push(`<option value=\"${row.state_code}\" ${selected}>${row.state_name}</option>`);\n      });\n\n      let html = items.join(\"\");\n      $('#state').append(html);\n    });\n  },\n\n  isSafariBrowser: function () {\n    let isSafariBrowser = false;\n    let chromeAgent = navigator.userAgent.indexOf(\"Chrome\") > -1;\n    let safariAgent = navigator.userAgent.indexOf(\"Safari\") > -1;\n    if (!chromeAgent && safariAgent) {\n      isSafariBrowser = true;\n    }\n\n    return isSafariBrowser;\n  },\n\n}\n\nexport default helper;\n","import helper from './helper';\nconst bootbox =   window.bootbox;\nlet paymentJS = {\n\n  init: function(){\n    window.done = 0 ;\n        $(() => {\n\n            $('.forms').on('submit', async (e)=>{\n                if(window.done == 1) return;\n                let form = $(e.target);\n                let balance = parseFloat(e.target.getAttribute('balance')) ;\n                const amount =parseFloat(e.target.amount.value) || 0;\n                if(amount <= 0)\n                {\n                    e.preventDefault();\n                    bootbox.alert(`Payment must be greater than $0.`)\n                    return false;\n                }\n\n                let payment_increments = form.data('increment');\n                if (typeof payment_increments == 'string')\n                {\n                    payment_increments = payment_increments.split(\",\").join('');\n                }\n                if(amount > balance )\n                {\n                    e.preventDefault();\n                    bootbox.alert(`Payment amount cannot be greater than balance.`)\n                    return false;\n                }\n\n                if (amount < payment_increments) {\n                    e.preventDefault();\n                    let form = $(e.target);\n                    bootbox.confirm({\n                        message: `This payment is less than the monthly payment agreement. Are you sure you wish to apply this amount to balance?`,\n                        buttons: {\n                          cancel: {\n                              label: 'Yes',\n                              className: 'btn-primary'\n                          },\n                          confirm: {\n                              label: 'Cancel',\n                              className: 'btn-secondary'\n                          },\n                        },\n                        callback: async function (result) {\n                            if(!result)\n                            {\n                                window.done = 1;\n                                let submitBtn = form.find('.submit-buttons');\n                                submitBtn.prop('disabled', true).text('Processing...');\n                                delete bootbox.confirm;\n                                form.trigger('submit');\n                            }\n                        }\n                    });\n                }\n\n            });\n            const refund = $(`a[data-payment]`);\n            const confirmModal = $(`#confirmModal`);\n            const refundForm = $(`#refundForm`)\n            refund.click(e => {\n                e.preventDefault();\n                const payment_id = e.target.dataset.payment;\n                confirmModal.modal()\n                let submitBnt = refundForm.find(`button[type='submit']`);\n                let appUrl = helper.getSiteUrl();\n                let refund = appUrl + '/refund/payment/' + payment_id;\n                refundForm.attr(`action`, refund);\n            })\n\n\n            const history = $(`[data-history]`);\n            if (history.data('history'))\n            {\n                const to = history[0];\n                to.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n\n            }\n        })\n\n  },\n\n\n\n}\n\npaymentJS.init();\n"],"sourceRoot":""}