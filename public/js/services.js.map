{"version":3,"sources":["webpack:///./resources/js/form_table.js","webpack:///./resources/js/services.js","webpack:///./resources/js/helper.js"],"names":["bootbox","window","alertify","defaults","notifier","delay","position","FormTable","trigger","tbody","cols","saveLink","action","cancelBtn","clearTrFirstTime","this","id","Math","random","toString","substr","save","cancel","addActionButtons","$","click","innerHTML","row","createRow","insertAdjacentHTML","cancelRow","saveRow","console","error","rows","querySelectorAll","forEach","tr","tds","document","createElement","setAttribute","style","cursor","textContent","length","appendChild","addEventListener","e","target","parentNode","remove","Actionbuttons","deleteApi","dataset","object","JSON","parse","edit_td","delete_td","editBtn","disableBtn","disable","a","tthis","is_product","indexOf","confirm","message","buttons","label","className","callback","result","log","_token","token","post","_delete","status","lastTd","td","abs","querySelector","data","innerText","classList","add","success","msg","dismissOthers","fileds","keys","Object","k","index","value","input","newprice","childNodes","split","join","parseFloat","toFixed","saveEditBtn","cancelEditBtn","inputs","params","node","nodeAttr","attributes","type","name","checked","update","stringify","price","colsKey","options","d","saveBtn","rowNodes","store","done","res","html","c","updateUrl","fail","values","responseJSON","errors","getElementById","receivable","description","note","formTable","services","helper","getSiteUrl","location","origin","loadStates","statesJsonFile","getJSON","items","each","key","selected","state_code","push","state_name","append","isSafariBrowser","chromeAgent","navigator","userAgent","safariAgent"],"mappings":"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","file":"/js/services.js","sourcesContent":["import alertify from 'alertifyjs';\nconst bootbox =   window.bootbox;\nalertify.defaults = {\n\n        notifier:{delay:5,position:'top-right'}\n\n};\nclass FormTable {\n\n\n\n    constructor({trigger,tbody,cols,saveLink,action,cancelBtn,clearTrFirstTime}) {\n\n        //Trigger\n        if (!trigger) return console.error('Trigger Not Found');\n        if (!tbody) return console.error('tbody Not Found');\n        if (!cols) return console.error('Columns Not Found');\n        saveLink ? this.saveLink = saveLink : this.saveLink = false ;\n        action ? this.action = action : this.action = false ;\n        cancelBtn ? this.cancelBtn = cancelBtn : this.cancelBtn = false ;\n        clearTrFirstTime ? this.clearTrFirstTime = clearTrFirstTime : this.clearTrFirstTime = false ;\n        this.trigger = trigger\n        this.tbody = tbody\n        //create id\n        this.id = Math.random().toString(36).substr(2, 9);\n        this.save = `save-${this.id}`;\n        this.cancel = `cancel-${this.id}`;\n\n        if (this.action)\n        {\n            // add edit and delete link\n            this.addActionButtons(tbody,cols)\n        }\n\n        $(this.trigger).click(() => {\n            if (this.clearTrFirstTime) tbody.innerHTML = '';\n            this.clearTrFirstTime = 0;\n            /// create row\n            this.row = this.createRow(cols)\n            /// inset row to document\n            this.tbody.insertAdjacentHTML('beforeend', this.row)\n            // cancel  = delete row\n            this.cancelRow(this.cancel)\n            // save data\n            this.saveRow(this.save,cols)\n            // generat new radom id\n            this.id = Math.random().toString(36).substr(2, 9);\n            this.save = `save-${this.id}`;\n            this.cancel = `cancel-${this.id}`;\n        })\n\n        return this;\n    }\n    addCancelBtn(rows) {\n        let trs = rows.querySelectorAll('tr');\n        trs.forEach(tr => {\n            let tds = tr.querySelectorAll('td');\n            let cancel = document.createElement('a');\n            cancel.setAttribute('class', 'text-primary link ')\n            cancel.style.cursor = `pointer`;\n            cancel.textContent = 'Cancel'\n            tds[tds.length - 1].appendChild(cancel);\n            cancel.addEventListener('click',e => e.target.parentNode.parentNode.remove())\n        })\n    }\n    addActionButtons(rows,cols) {\n        // console.log('Add Action Button');\n        let trs = rows.querySelectorAll('tr');\n        trs.forEach(tr => {\n          this.Actionbuttons(tr,cols)\n        })\n    }\n    Actionbuttons(tr,cols)\n    {\n       let tds = tr.querySelectorAll('td');\n            // let itemId = tr.dataset.id;\n            let deleteApi = tr.dataset.delete;\n            let object = JSON.parse(tr.dataset.object);\n            // console.log(deleteApi);\n            let edit_td = tds[tds.length - 2 ]\n            let delete_td = tds[tds.length - 1]\n            const id  = Math.random().toString(36).substr(2, 9);\n            /// add action button to last two tds\n            let editBtn = `edit-${id}`;\n            let disableBtn = `delete-${id}`;\n            // console.log(object);\n            edit_td.innerHTML = `<th><a class=\"text-primary link \" style=\"cursor:pointer\" id='${editBtn}'>Edit</a>`\n            delete_td.innerHTML   =`<a class=\"link text-${ !object.disable ? \"danger\":\"success\"} \" style=\"cursor:pointer\" id='${disableBtn}'>${ !object.disable ? \"Disable\":\"Enable\"}</a>`\n            $(`#${disableBtn}`).click(async (e) => {\n                let tthis = this;\n                 if(e.target.textContent == 'Disable')\n                {\n                    let is_product = deleteApi.indexOf('product') != -1;\n\n                    bootbox.confirm({\n                        message: `Are you sure you want to disable this ${is_product ? 'product' : 'service'}?`,\n                        buttons: {\n                            //i make it opsite to change button order\n                            cancel: {\n                                label: 'Yes',\n                                className: 'btn-primary'\n                            },\n                            confirm: {\n                                label: 'Cancel',\n                                className: 'btn-secondary'\n                            },\n                        },\n                        callback: async function (result) {\n                            //user want disable\n                            console.log(result);\n                            if(!result)\n                            {\n                                    // proccess delete\n                                    const _token = tthis.tbody.dataset.token;\n                                    const _delete = await $.post(deleteApi, { _token, });\n                                    // console.log(_delete.responseJSON);\n                                    if (_delete.status) {\n                                        //get row\n                                        const row = e.target.parentNode.parentNode;\n                                        const lastTd = row.querySelectorAll('td');\n                                        let td = lastTd[Math.abs(lastTd.length- 1)];\n                                        let a = td.querySelector('a');\n                                        console.log(_delete.data);\n                                        if(_delete.data.disable == 1)\n                                        {\n                                            a.innerText = \"Enable\";\n                                            a.classList.add('text-success');\n                                            a.classList.remove('text-danger');\n                                        }else{\n\n                                            a.innerText = \"Disable\";\n                                            a.classList.remove('text-success');\n                                            a.classList.add('text-danger');\n                                        }\n                                        //delete row\n                                        // row.remove();\n                                        //message\n                                        alertify.success(_delete.msg).dismissOthers()\n                                    } else {\n                                        alertify.error(_delete.msg).dismissOthers()\n                                    }\n                            }\n                        }\n                    });\n                }else{\n\n                                    // if user want enable\n                                    // proccess delete\n                                    const _token = this.tbody.dataset.token;\n                                    const _delete = await $.post(deleteApi, { _token, });\n                                    // console.log(_delete.responseJSON);\n                                    if (_delete.status) {\n                                        //get row\n                                        const row = e.target.parentNode.parentNode;\n                                        const lastTd = row.querySelectorAll('td');\n                                        let td = lastTd[Math.abs(lastTd.length- 1)];\n                                        let a = td.querySelector('a');\n                                        console.log(_delete.data);\n                                        if(_delete.data.disable == 1)\n                                        {\n                                            a.innerText = \"Enable\";\n                                            a.classList.add('text-success');\n                                            a.classList.remove('text-danger');\n                                        }else{\n\n                                            a.innerText = \"Disable\";\n                                            a.classList.remove('text-success');\n                                            a.classList.add('text-danger');\n                                        }\n                                        //delete row\n                                        // row.remove();\n                                        //message\n                                        alertify.success(_delete.msg).dismissOthers()\n                                    } else {\n                                        alertify.error(_delete.msg).dismissOthers()\n                                    }\n                }\n\n\n            })\n            $(`#${editBtn}`).click(async (e) => {\n                const row = e.target.parentNode.parentNode;\n                let fileds = {};\n                let keys = Object.keys(cols);\n                keys.forEach(k => { if (object[k]) fileds[k] = object[k]; })\n                // inset input fields\n                let tds = row.querySelectorAll('td');\n                // console.log(tds[2].querySelector('input'));\n                keys.forEach(async(k,index) => {\n                    let td = tds[index];\n                    let value = fileds[k] ? fileds[k] : '';\n                    let input = ``;\n                    if (cols[k] !== 'checkbox') {\n                        if(k == 'price')\n                        {\n                            let newprice = td.childNodes[0].textContent.split('$').join('');\n                            newprice = parseFloat(newprice).toFixed(2);\n                            value = newprice;\n                        }\n                        if(k == 'amount')\n                        {\n                            let newprice = td.childNodes[0].textContent.split('$').join('');\n                            newprice = parseFloat(newprice).toFixed(0);\n                            value = newprice;\n                        }\n                        input = `<input class='form-control ' step='any' name='${k}' value='${value}' id='${k}-${this.id}' type='${cols[k]}' />`;\n                    } else {\n                        input = `<input class='form-control ' name='${k}'  ${value ? \"checked\" : \"\"}  id='${k}-${this.id}' type='${cols[k]}' />`;\n                    }\n                    td.innerHTML = input\n                })\n\n                let delete_td = tds[tds.length - 2 ]\n                let edit_td = tds[tds.length - 1]\n                const id  = Math.random().toString(36).substr(2, 9);\n                /// add action button to last two tds\n                let saveEditBtn = `save-edit-${id}`;\n                let cancelEditBtn = `cancel-edit-${id}`;\n                delete_td.innerHTML = `<th><a class=\"text-primary link \" style=\"cursor:pointer\" id='${saveEditBtn}'>Save</a>`\n                edit_td.innerHTML   =`<a class=\"text-primary link \" style=\"cursor:pointer\" id='${cancelEditBtn}'>Cancel</a>`\n\n\n                const inputs = row.querySelectorAll('input');\n                $(`#${saveEditBtn}`).click(async e => {\n                    const params = {};\n                    inputs.forEach(node => {\n                        let nodeAttr = node.attributes;\n                        if (node.type)\n                        {\n                            if (node.type == 'checkbox')\n                            {\n\n                                return params[nodeAttr.name.value] = node.checked;\n                            }\n                        }\n                        params[nodeAttr.name.value] = node.value;\n\n                    })\n                    params['_token'] = this.tbody.dataset.token;\n                    let update = await $.post(row.dataset.update,params);\n                    if (update.status) {\n                        inputs.forEach(async (input )=> {\n                            if (input.type != 'checkbox')\n                            {\n                                if(input.name == 'price')\n                                {\n\n                                    input.insertAdjacentHTML('afterend', \"$\"+parseFloat(input.value).toFixed(2))\n                                }else{\n\n                                    input.insertAdjacentHTML('afterend', input.value)\n                                }\n                            } else {\n                                //update object info\n                                input.parentNode.parentNode.setAttribute('data-object',JSON.stringify(update.data));\n\n                                input.insertAdjacentHTML('afterend', input.checked ? \"Yes\" : \"No\")\n                            }\n                            this.Actionbuttons(tr,cols)\n                            input.remove()\n                        })\n\n                        return alertify.success(update.msg).dismissOthers();\n                    };\n                    return alertify.error(update.msg).dismissOthers();\n                })\n\n                $(`#${cancelEditBtn}`).click(() => {\n                        inputs.forEach(input => {\n                            if (input.type == 'checkbox'){\n                                input.insertAdjacentHTML('afterend', input.checked ? \"Yes\" : \"No\")\n                            }else if(input.name == 'price'){\n                                let price  = parseFloat(input.value).toFixed(2)\n                                input.insertAdjacentHTML('afterend', \"$\"+price)\n\n                            }else{\n                                input.insertAdjacentHTML('afterend', input.value)\n                            }\n                            input.remove()\n                            this.Actionbuttons(tr,cols)\n                        })\n                })\n\n\n            })\n    }\n\n    createRow(cols)\n    {\n        let colsKey = Object.keys(cols);\n        let tds = ``;\n        colsKey.forEach((k) => {\n            if (cols[k] != 'select')\n            {\n                tds += `\n                <td>\n                <input class='form-control' name='${k}' id='${k}-${this.id}' type='${cols[k]}' />\n                </td>\n\n                `\n            } else if (cols[k] == 'select') {\n                let data = this.tbody.dataset[k];\n                data ? data = JSON.parse(data) : data = [{id:'',name:''}];\n\n                let options = ``;\n\n                data.forEach(d => {\n                    options += `<option value='${d.id}'>${d.name}</option>`;\n                });\n                tds += `\n                <td>\n                    <select class='form-control' name='${k}[]' id='${k}-${this.id}' type='${cols[k]}'>\n                        ${options}\n                    </select>\n                </td>\n\n                `\n            } else {\n                return '';\n            }\n        })\n\n\n\n\n        let html = `\n                <tr>\n                ${tds}\n                    ${this.saveLink ? `<th><a class=\"text-primary link \" style=\"cursor:pointer\" id='${this.save}'>Save</a></th>`:``}\n                    <th><a class=\"text-primary link \" style=\"cursor:pointer\" id='${this.cancel}'>Cancel</a></th>\n                </tr>\n\n        `\n        return html\n    }\n\n    cancelRow(cancel) {\n        const cancelBtn = document.querySelector(`#${cancel}`)\n        if (cancelBtn)\n        {\n            cancelBtn.addEventListener('click', (e) => {\n                let row = e.target.parentNode.parentNode;\n                row.remove()\n            })\n        }\n    }\n    saveRow(save,cols) {\n        const saveBtn = document.querySelector(`#${save}`)\n        if (saveBtn) {\n            saveBtn.addEventListener('click', async (e) => {\n\n                const row = e.target.parentNode.parentNode;\n                const rowNodes = row.querySelectorAll('input');\n                const params = {};\n                params['_token'] = this.tbody.dataset.token;\n                rowNodes.forEach(node => {\n                    let nodeAttr = node.attributes;\n                    if (node.type)\n                    {\n                        if (node.type == 'checkbox')\n                        {\n\n                            return params[nodeAttr.name.value] = node.checked;\n                        }\n                    }\n                    return params[nodeAttr.name.value] = node.value;\n\n\n                })\n                const createProduct = await $.post(this.tbody.dataset.store, params)\n                    .done(res => {\n                        let html = ``;\n                        Object.keys(cols).forEach(c => {\n\n                            if (cols[c] == 'checkbox')\n                            {\n                                // console.log(res.data.object[c]);\n                                 html += `<td> ${res.data.object[c] ? 'Yes' : 'No'} </td>`\n                            }\n                            else {\n                               if(c == 'price')\n                               {\n                                   html += `<td> $${res.data.object[c] ? res.data.object[c] : ''} </td>`\n\n                               }else{\n\n                                   html += `<td> ${res.data.object[c] ? res.data.object[c] : ''} </td>`\n                               }\n                            }\n                        })\n                    html += `<td></td><td></td>`;\n                    row.innerHTML = html\n                    row.setAttribute('data-update', res.data.updateUrl);\n                    row.setAttribute('data-object', JSON.stringify(res.data.object));\n                    this.Actionbuttons(row,cols)\n                    alertify.success(res.msg).dismissOthers()\n                })\n                .fail(res => {\n                   // display errors\n                    Object.values(res.responseJSON.errors).forEach(e => {\n                        alertify.error(e[0]).dismissOthers();\n                    })\n                })\n            })\n        }\n    }\n\n\n}\n\n\n\nexport default FormTable;\n","\nimport { options } from 'dropzone';\nimport helper from './helper';\nimport alertify from 'alertifyjs';\nimport formTable from './form_table';\nlet services = {\n\n  init: function(){\n\n        console.log('services');\n\n\n         const params = {\n            trigger: document.getElementById('addNewFormRowForServicesTable'),\n            tbody: document.getElementById('services-rows'),\n             cols: { name: 'text', price: 'number',receivable:\"checkbox\",description:'text',note:\"text\" },\n             saveLink: true,\n            action:true\n        }\n         new formTable(params);\n\n\n    },\n\n\n\n\n}\n\nservices.init();\n\n","import axios from \"axios\";\n\nvar helper = {\n\n  getSiteUrl: function () {\n    return window.location.origin;\n  },\n\n  loadStates: function () {\n    let statesJsonFile = `${this.getSiteUrl()}/storage/states.json`;\n    $.getJSON(statesJsonFile, function (data) {\n      let items = [];\n      $.each(data, function (key, row) {\n        let selected = '';\n        if ($('#state').data('value') == row.state_code) {\n          selected = 'selected';\n        }\n        items.push(`<option value=\"${row.state_code}\" ${selected}>${row.state_name}</option>`);\n      });\n\n      let html = items.join(\"\");\n      $('#state').append(html);\n    });\n  },\n\n  isSafariBrowser: function () {\n    let isSafariBrowser = false;\n    let chromeAgent = navigator.userAgent.indexOf(\"Chrome\") > -1;\n    let safariAgent = navigator.userAgent.indexOf(\"Safari\") > -1;\n    if (!chromeAgent && safariAgent) {\n      isSafariBrowser = true;\n    }\n\n    return isSafariBrowser;\n  },\n\n}\n\nexport default helper;\n"],"sourceRoot":""}